{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","newtext","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","toUpperCase","showAlert","toLowerCase","split","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9a20f92a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n       \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string.isRequired,\r\n                }\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    aboutText: \"About\",\r\n    };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log('UpperCase was clicked' + text);\r\n        let newtext= text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to UpperCase\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        // console.log('UpperCase was clicked' + text);\r\n        let newtext= text.toLowerCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to LowerCase\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        // console.log('UpperCase was clicked' + text);\r\n        let newtext= '';\r\n        setText(newtext);\r\n        props.showAlert(\"Cleared the text\", \"success\");\r\n    }\r\n\r\n    let newtext;\r\n    const handleInverseClick = ()=>{\r\n        // console.log('UpperCase was clicked' + text);\r\n        if (newtext === text.toLowerCase()){\r\n            setText(newtext = text.toUpperCase()); \r\n            }else{\r\n                setText(newtext = text.toLowerCase());\r\n            }\r\n            props.showAlert(\"Inverted the text\", \"success\");\r\n        // setText(newtext);\r\n    }\r\n\r\n  \r\n    const handleOnChange = (event)=>{\r\n        // console.log('On Change');\r\n        setText(event.target.value)\r\n    }\r\n        \r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}} >\r\n            <h1 >{props.heading}</h1>\r\n  <div className=\"mb-3\">\r\n  <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode==='dark'?'grey':'white' , color: props.mode==='dark'?'white':'#042743'}} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary my-1 \" onClick={handleUpClick}>Convert to Uppercase</button>\r\n<button className=\"btn btn-success mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n<button className=\"btn btn-danger mx-1\" onClick={handleClearClick}>Clear</button>\r\n<button className=\"btn btn-warning mx-1 my-2\"  onClick={handleInverseClick}>Inverse Case</button>\r\n        </div>\r\n\r\n        <div className=\"container my-2\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read these words</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter Something to preview here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        \r\n           props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  \r\n</div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import { useState } from 'react/cjs/react.development';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Wheather darkMode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n    setMode('dark');\n    document.body.style.backgroundColor= '#042743';\n    showAlert(\"Dark mode has been enabled\", \"success\");\n    document.title = 'TextUtils - Dark Mode';\n    // setInterval(() => {\n    //   document.title = 'TextUtils is Amazing';\n      \n    // }, 2000);\n\n    // setInterval(() => {\n    //   document.title = 'Install TextUtils ';\n      \n    // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor= 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n  <>\n  {/* <Router> */}\n{/* <Navbar title=\"TextUtils\" aboutText=\"About Textutils\"/> */}\n{/* <Navbar/> */}\n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n{/* <Switch> */}\n  {/* use exact for getting the exact path */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}  />\n          {/* </Route>\n</Switch> */}\n</div>\n{/* </Router> */}\n\n  </>\n\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}